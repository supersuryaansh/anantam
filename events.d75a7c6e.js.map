{"mappings":"","sources":["hover3D.js"],"sourcesContent":["class Hover3D {\n  constructor(id) {\n    this.id = id;\n    this.xOffset = 10;\n    this.yOffset = 10;\n    this.attack = 0.1;\n    this.release = 0.5;\n    this.perspective = 500;\n    this.create();\n  }\n\n  create() {\n    document.querySelectorAll(this.id).forEach((element) => {\n      const rectTransform = element.getBoundingClientRect();\n      const perspective = \"perspective(\" + this.perspective + \"px) \";\n      element.style.setProperty(\"transform-style\", \"preserve-3d\");\n\n      element.addEventListener(\"mouseenter\", (e) => {\n        element.style.setProperty(\n          \"transition\",\n          \"transform \" + this.attack + \"s\"\n        );\n      });\n\n      element.addEventListener(\"mousemove\", (e) => {\n        let dy = e.clientY - rectTransform.top;\n        let dx = e.clientX - rectTransform.left;\n        let xRot = this.map(\n          dx,\n          0,\n          rectTransform.width,\n          -this.xOffset,\n          this.xOffset\n        );\n        let yRot = this.map(\n          dy,\n          0,\n          rectTransform.height,\n          this.yOffset,\n          -this.yOffset\n        );\n        let propXRot = \"rotateX(\" + yRot + \"deg) \";\n        let propYRot = \"rotateY(\" + xRot + \"deg)\";\n\n        element.style.setProperty(\n          \"transform\",\n          perspective + propXRot + propYRot\n        );\n      });\n\n      element.addEventListener(\"mouseleave\", (e) => {\n        element.style.setProperty(\n          \"transition\",\n          \"transform \" + this.release + \"s\"\n        );\n        element.style.setProperty(\n          \"transform\",\n          perspective + \"rotateX(0deg) rotateY(0deg)\"\n        );\n      });\n    });\n  }\n  // Processing map() function\n  map(value, istart, istop, ostart, ostop) {\n    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));\n  }\n}\n"],"names":[],"version":3,"file":"events.d75a7c6e.js.map"}